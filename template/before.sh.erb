#!/bin/bash
# This script is sourced before script.sh is forked. Based on OOD's official example.
# We add: PATH (/opt), optional Lmod init, optional Conda activation, working_dir.

set -e

# --- (A) Export 'module' if present (same as official) ---
[[ $(type -t module) == "function" ]] && export -f module

# --- (B) Ensure Jupyter is on PATH (your system-wide venv under /opt) ---
export PATH="/opt/jupyterlab/bin:$PATH"

# --- (C) (Optional) Initialize Lmod (you'll enable this when ready) ---
# source /etc/profile.d/lmod.sh 2>/dev/null || true
# module load cuda/12.4  # example

# --- (E) Switch to working directory (fallback to $HOME) ---
# cd "<%= context.working_dir %>" 2>/dev/null || cd "$HOME"

# --- (F) Find an available port (official helper) ---
port=$(find_port)

# --- (G) Generate random password and SHA1 hash as official example ---
SALT="$(create_passwd 16)"
password="$(create_passwd 16)"
PASSWORD_SHA1="$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')"

# --- (H) Export CONFIG_FILE for script.sh to use (same contract as official) ---
export CONFIG_FILE="${PWD}/jupyter_config.py"

# --- (I) Determine base_url for OOD reverse proxy (official style) ---
# $host is already set by OOD; do not redefine it. Use '/node/${host}/${port}/'
BASE_URL="/node/${host}/${port}/"

# --- (J) Create Jupyter config with secure permissions ---
(
umask 077
cat > "${CONFIG_FILE}" << EOL
# Jupyter configuration generated by OOD before.sh.erb
# NotebookApp keys (classic), plus ServerApp keys for newer JupyterLab.
c.NotebookApp.ip = '*'
c.NotebookApp.port = ${port}
c.NotebookApp.port_retries = 0
c.NotebookApp.password = u'sha1:${SALT}:${PASSWORD_SHA1}'
c.NotebookApp.base_url = '${BASE_URL}'
c.NotebookApp.open_browser = False
c.NotebookApp.allow_origin = '*'
c.NotebookApp.notebook_dir = '<%= context.working_dir %>'
c.NotebookApp.disable_check_xsrf = True

# ServerApp (JupyterLab 3/4)
c.ServerApp.ip = '*'
c.ServerApp.port = ${port}
c.ServerApp.port_retries = 0
c.ServerApp.password = u'sha1:${SALT}:${PASSWORD_SHA1}'
c.ServerApp.base_url = '${BASE_URL}'
c.ServerApp.open_browser = False
c.ServerApp.allow_origin = '*'
c.ServerApp.root_dir = '<%= context.working_dir %>'
c.ServerApp.disable_check_xsrf = True
EOL
)

# --- (K) Export connection secrets for the view (script.sh will emit them) ---
export port
export password
